<!--
//
// Firebird .Net Data Provider - Firebird managed data provider for .Net and Mono
//
// Author : Carlos Guzman Alvarez <carlosga@telefonica.net>
//
// Distributable under LGPL license.
// You may obtain a copy of the License at http://www.gnu.org/copyleft/lesser.html
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// LGPL License for more details.
//
// This file was created by members of the firebird development team.
// All individual contributions remain the Copyright (C) of those
// individuals.  Contributors to this file are either listed here or
// can be obtained from a CVS history command.
//
// All rights reserved.
//
// For more information please see http://www.firebirdsql.org
//
-->

<doc>
<member name="T:FbDataReader">
    <summary>
    Provides a means of reading a forward-only stream of rows from a Firebird
    database. This class cannot be inherited.
    </summary>
    <remarks>
	<para>
	To create an <b>FbDataReader</b>, you must call the <see cref="FbCommand.ExecuteReader">ExecuteReader</see>
	method of the <see cref="FbCommand">FbCommand</see> object, rather than directly using a constructor.
	</para>
	<para>
	While the <b>FbDataReader</b> is in use, the associated <see cref="FbConnection">FbConnection</see> is 
	busy serving the <b>FbDataReader</b>, and no other operations can be performed 
	on the <see cref="FbConnection">FbConnection</see> other than closing it. This is the case until the 
	<see cref="FbDataReader.Close">Close</see> method of the <b>FbDataReader</b> is called. For example, you cannot retrieve
	output parameters until after you call <see cref="FbDataReader.Close">Close</see>.
	</para>
	<para>
	<see cref="FbDataReader.IsClosed">IsClosed</see> and <see cref="FbDataReader.RecordsAffected">RecordsAffected</see>
	are the only properties that you can call after the <b>FbDataReader</b> is closed. In some cases, 
	you must call <see cref="FbDataReader.Close">Close</see> before you can call 
	<see cref="FbDataReader.RecordsAffected">RecordsAffected</see>.
	</para>
    </remarks>
    <example>
	The following example creates an <see cref="FbConnection">FbConnection</see>, an <see cref="FbCommand">FbCommand</see>, and 
	an <b>FbDataReader</b>. The example reads through the data, writing it out to 
	the console. Finally, the example closes the <b>FbDataReader</b>, then the 
	<see cref="FbConnection">FbConnection</see>.    
	<code>
public void ReadMyData(string myConnString) 
{
    string mySelectQuery = "SELECT dept_no, departament FROM departament";
    
    FbConnection	myConnection = new FblConnection(myConnString);
    myConnection.Open();
    
    FbTransaction	myTxn		 = myConnection.BeginTransaction();
    FbCommand		myCommand    = new FbCommand(mySelectQuery, myConnection, myTxn);    
    
    FbDataReader myReader;
    myReader = myCommand.ExecuteReader();
    
    // Always call Read before accessing data.
    while (myReader.Read()) 
    {
       Console.WriteLine(myReader.GetInt32(0) + ", " + myReader.GetString(1));
    }
    
    // always call Close when done reading.
    myReader.Close();
    
    // Close the connection when done with it.
    myConnection.Close();
 }    
	</code>
    </example>
</member>
<member name="M:#ctor(FirebirdSql.Data.Firebird.FbCommand,FirebirdSql.Data.Firebird.FbConnection)">
    <summary>
    Initializes a new instance of the <see cref="FbDataReader">FbDataReader</see> class.
    </summary>
    <param name="command">A <see cref="FbCommand">FbCommand</see> object</param>
    <param name="connection">A <see cref="FbDataReader">FbConnection</see> object</param>
</member>
<member name="M:Finalize">
    <summary>
    </summary>
</member>
<member name="M:Dispose">
    <summary>
    Releases the unmanaged resources used by the <see cref="FbDataReader">FbDataReader</see> and optionally 
    releases the managed resources.
    </summary>
</member>
<member name="M:Close">
    <summary>
    Closes the <see cref="FbDataReader">FbDataReader</see> object.
    </summary>
    <remarks>
	<para>
	You must explicitly call the <b>Close</b> method when you are through 
	using the the <see cref="FbDataReader">FbDataReader</see> to use the associated 
	<see cref="FbConnection">FbConnection</see> for any other purpose.
	</para>
	<para>
	The <b>Close</b> method fills in the values for output parameters, return 
	values and <b>RecordsAffected</b>, increasing the amount of time it takes to 
	close a <b>FbDataReader</b> that was used to process a large or complicated query. 
	In cases where the return values and the number of records affected by a query are not
	significant, the amount of time it takes to close the <b>FbDataReader</b> can be 
	reduced by calling the <see cref="FbCommand.Cancel">Cancel</see> method of the associated 
	<see cref="FbCommand">FbCommand</see> object before calling the <b>Close</b> method.
	</para>
    </remarks>
</member>
<member name="M:NextResult">
    <summary>
    Advances the data reader to the next result, 
    when reading the results of batch DSQL statements.
    </summary>
    <returns><b>true</b> if there are more result sets; otherwise, <b>false</b>.</returns>
    <remarks>
	<para>
	Used to process multiple results, which can be generated by executing batch 
	DSQL statements.
	</para>
	<para>
	By default, the data reader is positioned on the first result.
	</para>    
    </remarks>    
</member>
<member name="M:Read">
    <summary>
    Advances the <see cref="FbDataReader">FbDataReader</see> to the next record.
    </summary>
    <returns><b>true</b> if there are more rows; otherwise, <b>false</b>.</returns>
    <remarks>
	<para>
	The default position of the <see cref="FbDataReader">FbDataReader</see> is prior 
	to the first record. Therefore, you must call <b>Read</b> to begin accessing any 
	data.
	</para>
	<para>
	Only one <b>FbDataReader</b> per associated <see cref="FbConnection">FbConnection</see> 
	may be open at a time, and any attempt to open another will fail until the first 
	one is closed. Similarly, while the <b>FbDataReader</b> is in use, the associated 
	<b>FbConnection</b> is busy serving it until you call <see cref="FbDataReader.Close">Close</see>.
	</para>
    </remarks>
</member>
<member name="M:GetSchemaTable">
    <summary>
    Returns a DataTable that describes the column metadata of the FbDataReader.
    </summary>
    <returns>A DataTable that describes the column metadata.</returns>
    <exception cref="InvalidOperationException">
    The <see cref="FbDataReader">FbDataReader</see> is closed.
	</exception>
	<remarks>
	<list type="table">
		<listheader>
			<term>DataReader Column</term>
			<term>Description</term>								
		</listheader>
		<item>
			<description>ColumnName</description>
			<description>
			The name of the column; this might not be unique. If this cannot be
			determined, a null value is returned. This name always reflects the
			most recent renaming of the column in the current view or command text.
			</description>
		</item>
		<item>
			<description>ColumnOrdinal</description>				
			<description>
			The ordinal of the column. This is zero for the bookmark column of the
			row, if any. Other columns are numbered starting with one. This column
			cannot contain a null value.
			</description>				
		</item>
		<item>
			<description>ColumnSize</description>				
			<description>
			The maximum possible length of a value in the column. For columns that
			use a fixed-length data type, this is the size of the data type.				
			</description>				
		</item>	
		<item>
			<description>NumericPrecision</description>
			<description>
			If ProviderType is a numeric data type, this is the maximum precision
			of the column. The precision depends on the definition of the column.
			If ProviderType is not a numeric data type, this is a null value.
			</description>
		</item>
		<item>
			<description>NumericScale</description>
			<description>
			If ProviderType is is DECIMAL or NUMERIC,
			the number of digits to the right of the decimal point. Otherwise, this
			is a null value.
			</description>
		</item>
		<item>
			<description>DataType</description>
			<description>Maps to the .Net Framework type of the column.</description>
		</item>
		<item>
			<description>ProviderType</description>
			<description>
			The indicator of the column's data type. If the data
			type of the column varies from row to row, this must be Object. This
			column cannot contain a null value.
			</description>
		</item>
		<item>
			<description>IsLong</description>
			<description>
			Set if the column contains a Binary Long Object (BLOB) that contains
			very long data. The definition of very long data is provider-specific.
			</description>
		</item>
		<item>
			<description>AllowDbNull</description>
			<description>
			Set if the consumer can set the column to a null value
			or if the provider cannot determine whether or not the consumer can set
			the column to a null value. Otherwise, not set. A column may contain
			null values, even if it cannot be set to a null value.
			</description>
		</item>
		<item>
			<description>IsReadOnly</description>
			<description><b>true</b> if the column can be modified; otherwise <b>false</b>.</description>
		</item>
		<item>
			<description>IsRowVersion</description>
			<description>
			Set if the column contains a persistent row identifier
			that cannot be written to, and has no meaningful value except to
			identity the row.
			</description>
		</item>
		<item>
			<description>IsUnique</description>
			<description>
			<b>true</b>: No two rows in the base table-the table returned in
			BaseTableName-can have the same value in this column. IsUnique is
			guaranteed to be <b>true</b> if the column constitutes a key by itself 
			or if there is a constraint of type UNIQUE that applies only to this column. 
			<b>false</b>: The column can contain duplicate values in the base table.The 
			default of this column is <b>false</b>.
			</description>
		</item>
		<item>
			<description>IsKey</description>
			<description>
			<b>true</b>: The column is one of a set of columns in
			the rowset that, taken together, uniquely identify the row. The set of
			columns with IsKey set to <b>true</b> must uniquely identify a row in
			the rowset. There is no requirement that this set of columns is a
			minimal set of columns. This set of columns may be generated from a
			base table primary key, a unique constraint or a unique index. 
			<b>false</b>: The column is not required to uniquely identify the row.
			</description>
		</item>
		<item>
			<description>IsAutoIncrement</description>
			<description>
			<b>true</b>: The column assigns values to new rows in fixed 
			increments. <b>false</b>: The column does not assign values 
			to new rows in fixed increments.The default of this column is 
			<b>false</b>.
			</description>
		</item>
		<item>
			<description>IsAliased</description>
			<description>
			<b>true</b> if the column name is an alias; otherwise <b>false</b>.			
			</description>
		</item>
		<item>
			<description>IsExpression</description>
			<description>
			<b>true</b> if the column is an expression; otherwise <b>false</b>.
			</description>
		</item>
		<item>
			<description>BaseSchemaName</description>
			<description>
			The name of the schema in the data store that contains
			the column. A null value if the base schema name cannot be determined.
			The default of this column is a null value.
			</description>
		</item>
		<item>
			<description>BaseCatalogName</description>
			<description>
			The name of the catalog in the data store that contains
			the column. NULL if the base catalog name cannot be determined. The
			default of this column is a null value.
			</description>
		</item>
		<item>
			<description>BaseTableName</description>
			<description>
			The name of the table or view in the data store that contains the
			column. A null value if the base table name cannot be determined. The
			default of this column is a null value.
			</description>
		</item>
		<item>
			<description>BaseColumnName</description>
			<description>
			The name of the column in the data store. This might be different than
			the column name returned in the ColumnName column if an alias was used.
			A null value if the base column name cannot be determined or if the
			rowset column is derived, but not identical to, a column in the data
			store. The default of this column is a null value.
			</description>
		</item>		
	</list>
	</remarks>
</member>
<member name="M:GetName(System.Int32)">
    <summary>
    Gets the name of the specified column.
    </summary>
    <param name="i">The zero-based column ordinal.</param>
    <returns>The name of the column</returns>
</member>
<member name="M:GetBaseTableName(System.Int32)">
    <summary>
    Gets the table name of the specified column.
    </summary>
    <param name="i">The zero-based column ordinal.</param>
    <returns>The table name of the column</returns>
</member>
<member name="M:GetBaseColumnName(System.Int32)">
    <summary>
    Gets the base column name of the specified column.
    </summary>
    <param name="i">The zero-based column ordinal.</param>
    <returns>The name of the column</returns>
</member>
<member name="M:GetDataTypeName(System.Int32)">
    <summary>
    Gets the name of the source data type.		
    </summary>
    <param name="i">The zero-based column ordinal.</param>
    <returns>The name of the back-end Data Type</returns>
</member>
<member name="M:GetFieldType(System.Int32)">
    <summary>
    Gets the Type that is the data type of the object.
    </summary>
    <param name="i">The zero-based column ordinal. </param>
    <returns>The Type that is the data type of the object.</returns>
</member>
<member name="M:GetValue(System.Int32)">
    <summary>
    Gets the value of the column at the specified ordinal in its native format.
    </summary>
    <param name="i">The zero-based column ordinal.</param>
    <returns>The value to return.</returns>
    <remarks>
    This method returns DBNull for null database columns.
    </remarks>
</member>
<member name="M:GetValues(System.Object[])">
    <summary>
    Gets all the attribute columns in the current row.
    </summary>
    <param name="values">An array of type Object into which to copy the attribute columns.</param>
    <returns>The number of instances of Object in the array.</returns>
</member>
<member name="M:GetOrdinal(System.String)">
    <summary>
    Gets the column ordinal, given the name of the column.
    </summary>
    <param name="name">The name of teh column</param>
    <returns>The zero-based column ordinal.</returns>
</member>
<member name="M:GetBoolean(System.Int32)">
    <summary>
    Gets the value of the specified column as a Boolean.
    </summary>
    <param name="i">The zero-based column ordinal. </param>
    <returns>A Boolean that is the value of the column.</returns>
    <remarks>Call IsDBNull to check for null values before calling this method.</remarks>
    <exception cref="T:System.InvalidCastException">The specified cast is not valid.</exception>
</member>
<member name="M:GetByte(System.Int32)">
    <summary>
    Gets the value of the specified column as a byte.
    </summary>
    <param name="i">The zero-based column ordinal. </param>
    <returns>The value of the specified column as a byte.</returns>
    <exception cref="T:System.InvalidCastException">The specified cast is not valid.</exception>
</member>
<member name="M:GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
    <summary>
    Reads a stream of bytes from the specified column offset into the buffer as 
    an array, starting at the given buffer offset.
    </summary>
    <param name="i">The zero-based column ordinal. </param>
    <param name="dataIndex">The index within the field where the read operation is to begin.</param>
    <param name="buffer">The buffer into which to read the stream of bytes.</param>
    <param name="bufferIndex">The index where buffer is to begin the write operation.</param>
    <param name="length">The number of bytes to read. </param>
    <returns>The actual number of bytes read.</returns>
    <remarks>
	<para>
	<b>GetBytes</b> returns the number of available bytes in the field.
	In most cases this is the exact length of the field. However, the
	number returned may be less than the true length of the field if 
	<b>GetBytes</b> has already been used to obtain bytes from the field. 
	This may be the case, for example, if the <see cref="FbDataReader">FbDataReader</see> 
	is reading a large data structure into a buffer. For more information, 
	see the <b>SequentialAccess</b> setting for <b>CommandBehavior</b>.
	</para>
	<para>
	If you pass a buffer that is a null reference, <b>GetBytes</b> returns 
	the length of the field in bytes.
	</para>
	<para>
	No conversions are performed, therefore the data retrieved must already 
	be a byte array.
	</para>    
    </remarks>
</member>
<member name="M:GetChar(System.Int32)">
    <summary>
    Gets the value of the specified column as a character.
    </summary>
    <param name="i">The zero-based column ordinal. </param>
    <returns>The value of the specified column as a character.</returns>
	<exception cref="T:System.InvalidCastException">The specified cast is not valid.</exception>    
</member>
<member name="M:GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
    <summary>
    Reads a stream of characters from the specified column offset into the 
    buffer as an array, starting at the given buffer offset.
    <seealso cref="M:GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)"/>
    </summary>
    <param name="i">The zero-based column ordinal. </param>
    <param name="dataIndex">The index within the field where the read operation is to begin.</param>
    <param name="buffer">The buffer into which to read the stream of bytes.</param>
    <param name="bufferIndex">The index where buffer is to begin the write operation.</param>
    <param name="length">The number of bytes to read. </param>
    <returns>The actual number of characters read.</returns>		
    <remarks>
	<para>
	<b>GetChars</b> returns the number of available characters in the field.
	In most cases this is the exact length of the field. However, the
	number returned may be less than the true length of the field if 
	<b>GetChars</b> has already been used to obtain characters from the field. 
	This may be the case, for example, if the <see cref="FbDataReader">FbDataReader</see> 
	is reading a large data structure into a buffer. For more information, 
	see the <b>SequentialAccess</b> setting for <b>CommandBehavior</b>.
	</para>
	<para>
	If you pass a buffer that is a null reference, <b>GetBytes</b> returns 
	the length of the field in characters.
	</para>
	<para>
	No conversions are performed, therefore the data retrieved must already 
	be a character array.
	</para>    
    </remarks>
</member>
<member name="M:GetGuid(System.Int32)">
    <summary>
    Gets the value of the specified column as a globally-unique identifier (GUID).
    </summary>
    <param name="i">The zero-based column ordinal. </param>
    <returns>The value of the specified column as a GUID.</returns>		
    <exception cref="T:System.InvalidCastException">The specified cast is not valid.</exception>
</member>
<member name="M:GetInt16(System.Int32)">
    <summary>
    Gets the value of the specified column as a 16-bit signed integer.
    </summary>
    <param name="i">The zero-based column ordinal. </param>
    <returns>The value of the specified column as a 16-bit signed integer.</returns>
    <exception cref="T:System.InvalidCastException">The specified cast is not valid.</exception>
</member>
<member name="M:GetInt32(System.Int32)">
    <summary>
    Gets the value of the specified column as a 32-bit signed integer.
    </summary>
    <param name="i">The zero-based column ordinal. </param>
    <returns>The value of the specified column as a 32-bit signed integer.</returns>		
	<exception cref="T:System.InvalidCastException">The specified cast is not valid.</exception>
</member>
<member name="M:GetInt64(System.Int32)">
    <summary>
    Gets the value of the specified column as a 64-bit signed integer.
    </summary>
    <param name="i">The zero-based column ordinal. </param>
    <returns>The value of the specified column as a 64-bit signed integer.</returns>		
    <exception cref="T:System.InvalidCastException">The specified cast is not valid.</exception>
</member>
<member name="M:GetFloat(System.Int32)">
    <summary>
    Gets the value of the specified column as a single-precision 
    floating-point number.
    </summary>
    <param name="i">The zero-based column ordinal. </param>
    <returns>The value of the specified column as a single-precision floating-point number.</returns>		
    <exception cref="T:System.InvalidCastException">The specified cast is not valid.</exception>
</member>
<member name="M:GetDouble(System.Int32)">
    <summary>
    Gets the value of the specified column as a double-precision floating point 
    number.
    </summary>
    <param name="i">The zero-based column ordinal. </param>
    <returns>The value of the specified column as a double-precision floating point number.</returns>
    <exception cref="T:System.InvalidCastException">The specified cast is not valid.</exception>
</member>
<member name="M:GetString(System.Int32)">
    <summary>
    Gets the value of the specified column as a string.
    </summary>
    <param name="i">The zero-based column ordinal. </param>
    <returns>The value of the specified column as a string.</returns>
    <exception cref="T:System.InvalidCastException">The specified cast is not valid.</exception>
</member>
<member name="M:GetDecimal(System.Int32)">
    <summary>
    Gets the value of the specified column as a Decimal object.
    </summary>
    <param name="i">The zero-based column ordinal. </param>
    <returns>The value of the specified column as a Decimal object.</returns>
    <exception cref="T:System.InvalidCastException">The specified cast is not valid.</exception>
</member>
<member name="M:GetDateTime(System.Int32)">
    <summary>
    Gets the value of the specified column as a DateTime object.
    </summary>
    <param name="i">The zero-based column ordinal. </param>
    <returns>The value of the specified column as a DateTime object.</returns>
    <exception cref="T:System.InvalidCastException">The specified cast is not valid.</exception>
</member>
<member name="M:GetData(System.Int32)">
    <summary>
    Not currently supported.
    </summary>
    <param name="i">The zero-based column ordinal. </param>
    <returns></returns>
</member>
<member name="M:IsDBNull(System.Int32)">
    <summary>
    Gets a value indicating whether the column contains non-existent or 
    missing values.
    </summary>
    <param name="i">The zero-based column ordinal. </param>
    <returns>true if the specified column value is equivalent to DBNull; otherwise, false.</returns>
</member>
<member name="M:isNumeric(System.Int32)">
    <summary>
    Gets a value indicating whether the column contains numeric values.
    </summary>
	<param name="i">The zero-based column ordinal. </param>
    <returns><b>true</b> if column contains numeric values or <b>false</b> if not</returns>
</member>
<member name="M:isLong(System.Int32)">
    <summary>
    Gets a value indicating whether the column contains long values.
    </summary>
	<param name="i">The zero-based column ordinal. </param>
    <returns><b>true</b> if column contains log values or <b>false</b> if not</returns>
</member>
<member name="M:allowDBNull(System.Int32)">
    <summary>
    Gets a value indicating whether the column allow DBNull value.
    </summary>
	<param name="i">The zero-based column ordinal. </param>
    <returns><b>true</b> if column allows DBNull value or <b>false</b> if not</returns>
</member>
<member name="M:isAliased(System.Int32)">
    <summary>
    Gets a value indicating whether the column name is an alias.
    </summary>
	<param name="i">The zero-based column ordinal. </param>
    <returns><b>true</b> if column name is an alias or <b>false</b> if not</returns>
</member>
<member name="M:isExpression(System.Int32)">
    <summary>
    Gets a value indicating whether the column is an expresion.
    </summary>
	<param name="i">The zero-based column ordinal. </param>
    <returns><b>true</b> if column is an expression or <b>false</b> if not</returns>
</member>
<member name="M:getSchemaTableStructure">
    <summary>
    Returns a Data datable with the Schema structure
    </summary>
    <returns>A datable with the structured needed to be used in GetSchemaTable method.</returns>
</member>
<member name="M:updateRecordsAffected">
    <summary>
    Updates the number of affected records.
    </summary>    
</member>
<member name="M:IEnumerable.GetEnumerator">
    <summary>
    This member supports the .NET Framework infrastructure and is not intended to be 
	used directly from your code.
    </summary>
    <returns>An <b>IEnumerator</b> that can be used to iterate through the collection.</returns>
</member>
<member name="P:Depth">
    <summary>
    Gets a value indicating the depth of nesting for the current row.
    </summary>
    <value>
	The depth of nesting for the current row.
	</value>
    <remarks>
    The outermost table has a depth of zero. The Firebird .NET Data Provider 
    does not support nesting and always returns zero.
    </remarks>
</member>
<member name="P:FieldCount">
    <summary>
    Gets the number of columns in the current row.
    </summary>
    <value>
	When not positioned in a valid recordset, 0; otherwise the number of columns in the current row. The default is -1.
	</value>
	<remarks>After executing a query that does not return rows, <b>FieldCount</b> returns 0.</remarks>
</member>
<member name="P:IsClosed">
    <summary>
    Gets a value indicating whether the data reader is closed.
    </summary>
    <value>    
	<b>true</b> if the <see cref="FbDataReader">FbDataReader</see> is closed; otherwise, <b>false</b>.
	</value>
	<remarks>
	<b>IsClosed</b> and <see cref="FbDataReader.RecordsAffected">RecordsAffected</see> 
	are the only properties that you can call after the <see cref="FbDataReader">FbDataReader</see> is 
	closed.
	</remarks>
</member>
<member name="P:RecordsAffected">
    <summary>
    Gets the number of rows changed, inserted, or deleted by execution of the 
    DSQL statement.
    </summary>
    <value>
    The number of rows changed, inserted, or deleted; 0 if no rows were affected 
    or the statement failed; and -1 for SELECT statements.
    </value>
    <remarks>
    <para>
    The <b>RecordsAffected</b> property is not set until all rows are read and you
    close the <see cref="FbDataReader">FbDataReader</see>.
    </para>
    <para>
    The value of this property is cumulative. For example, if two records 
    are inserted in batch mode, the value of RecordsAffected will be two.
    </para>
    <para>
    <see cref="IsClosed">IsClosed</see> and <b>RecordsAffected</b> are the only properties that you can call 
    after the FbDataReader is closed.
    </para>
    </remarks>
</member>
<member name="P:Item(System.Int32)">
    <summary>
    Gets the value of the specified column in its native format given 
    the column ordinal.
    </summary>
    <param name="i">The zero-based column ordinal. </param>
    <value>The value of the specified column in its native format.</value>
    <exception cref="IndexOutOfRangeException">
	The index passed was outside the range of 0 through <see cref="FbDataReader.FieldCount">
	FieldCount</see>.
	</exception>
</member>
<member name="P:Item(System.String)">
    <summary>
    Gets the value of the specified column in its native format given 
    the column name.
    </summary>
    <param name="name">The column name.</param>
    <value>The value of the specified column in its native format.</value>
    <exception cref="IndexOutOfRangeException">No column with the specified name was found.</exception>
</member>
</doc>
