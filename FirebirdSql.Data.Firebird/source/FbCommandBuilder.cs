/*
 *  Firebird ADO.NET Data provider for .NET and Mono 
 * 
 *     The contents of this file are subject to the Initial 
 *     Developer's Public License Version 1.0 (the "License"); 
 *     you may not use this file except in compliance with the 
 *     License. You may obtain a copy of the License at 
 *     http://www.ibphoenix.com/main.nfs?a=ibphoenix&l=;PAGES;NAME='ibp_idpl'
 *
 *     Software distributed under the License is distributed on 
 *     an "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either 
 *     express or implied.  See the License for the specific 
 *     language governing rights and limitations under the License.
 * 
 *  Copyright (c) 2002, 2004 Carlos Guzman Alvarez
 *  All Rights Reserved.
 */

using System;
using System.Data;
using System.Data.Common;
using System.Text;
using System.ComponentModel;
using FirebirdSql.Data.Firebird.Gds;

namespace FirebirdSql.Data.Firebird
{
	/// <include file='Doc/en_EN/FbCommandBuilder.xml' path='doc/class[@name="FbCommandBuilder"]/overview/*'/>
	public sealed class FbCommandBuilder : Component
	{
		#region FIELDS

		private FbDataAdapter	dataAdapter;
		private string			sqlInsert;
		private string			sqlUpdate;
		private string			sqlDelete;
		private	string			separator;
		private string			whereClausule1;
		private string			whereClausule2;
		private string			setClausule;
		private DataTable		schemaTable;
		private FbCommand		insertCommand;
		private FbCommand		updateCommand;
		private FbCommand		deleteCommand;		
		private string			quotePrefix;
		private string			quoteSuffix;
		private bool			disposed;
		private string			tableName;
		private bool			hasPrimaryKey;

		#endregion

		#region PROPERTIES

		/// <include file='Doc/en_EN/FbCommandBuilder.xml' path='doc/class[@name="FbCommandBuilder"]/property[@name="DataAdapter"]/*'/>
		[DefaultValue(null)]
		public FbDataAdapter DataAdapter
		{
			get { return dataAdapter; }
			set
			{			
				dataAdapter	= value;

				// Registers the CommandBuilder as a listener for RowUpdating events that are 
				// generated by the FbDataAdapter specified in this property.
				if (dataAdapter != null)
				{
					dataAdapter.RowUpdating += new FbRowUpdatingEventHandler(rowUpdatingHandler);
				}
			}
		}
		
		/// <include file='Doc/en_EN/FbCommandBuilder.xml' path='doc/class[@name="FbCommandBuilder"]/property[@name="QuotePrefix"]/*'/>
		[Browsable(false),
		DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		public string QuotePrefix
		{
			get { return quotePrefix; }
			set
			{
				if (insertCommand != null || updateCommand != null || deleteCommand != null)
				{
					throw new InvalidOperationException("This property cannot be changed after an insert, update, or delete command has been generated.");
				}
				
				quotePrefix = value;
			}
		}

		/// <include file='Doc/en_EN/FbCommandBuilder.xml' path='doc/class[@name="FbCommandBuilder"]/property[@name="QuoteSuffix"]/*'/>
		[Browsable(false),
		DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		public string QuoteSuffix
		{
			get { return quoteSuffix; }
			set
			{
				if (insertCommand != null || updateCommand != null || deleteCommand != null)
				{
					throw new InvalidOperationException("This property cannot be changed after an insert, update, or delete command has been generated.");
				}
				
				quoteSuffix = value;
			}
		}

		private FbCommand SelectCommand
		{
			get
			{
				if (dataAdapter.SelectCommand != null)
				{
					return dataAdapter.SelectCommand;
				}

				return null;
			}
		}


		#endregion

		#region CONSTRUCTORS

		/// <include file='Doc/en_EN/FbCommandBuilder.xml' path='doc/class[@name="FbCommandBuilder"]/constructor[@name="ctor"]/*'/>
		public FbCommandBuilder() : base()
		{			
			sqlInsert		= "INSERT INTO {0} ({1}) VALUES ({2})";
			sqlUpdate		= "UPDATE {0} SET {1} WHERE ( {2} )";
			sqlDelete		= "DELETE FROM {0} WHERE ( {1} )";
			// whereClausule1	= "(({0} IS NULL AND ? IS NULL) OR ({0} = ?))";
			whereClausule1	= "(({0} IS NULL) OR ({0} = ?))";
			whereClausule2	= "({0} = ?)";
			setClausule		= "{0} = ?";
			separator		= ", ";
			quotePrefix		= "\"";
			quoteSuffix		= "\"";

			GC.SuppressFinalize(this);
		}

		/// <include file='Doc/en_EN/FbCommandBuilder.xml' path='doc/class[@name="FbCommandBuilder"]/property[@name="ctor(FbDataAdapter)"]/*'/>
		public FbCommandBuilder(FbDataAdapter adapter) : this()
		{
			this.DataAdapter = adapter;
		}

		#endregion

		#region DISPOSE_METHODS

		/// <include file='Doc/en_EN/FbCommandBuilder.xml' path='doc/class[@name="FbCommandBuilder"]/method[@name="Dispose(System.Boolean)"]/*'/>
		protected override void Dispose(bool disposing)
		{
			if (!disposed)
			{
				try
				{
					if (disposing)
					{
						if (insertCommand != null)
						{
							insertCommand.Dispose();
						}
						if (updateCommand != null)
						{
							updateCommand.Dispose();
						}
						if (deleteCommand != null)
						{
							deleteCommand.Dispose();
						}
						if (schemaTable != null)
						{
							schemaTable.Dispose();
						}
					}
					
					// release any unmanaged resources
					
					disposed = true;
				}
				finally 
				{
					base.Dispose(disposing);
				}
			}
		}

		#endregion

		#region STATIC_METHODS

		/// <include file='Doc/en_EN/FbCommandBuilder.xml' path='doc/class[@name="FbCommandBuilder"]/method[@name="DeriveParameters(FbCommand)"]/*'/>
		public static void DeriveParameters(FbCommand command)
		{
			if (command.CommandType != CommandType.StoredProcedure)
			{
				throw new InvalidOperationException("The command text is not a valid stored procedure name.");
			}

			string spName		= command.CommandText.Trim();
			string quotePrefix	= "\"";
			string quoteSuffix	= "\"";

			if (spName.StartsWith(quotePrefix) &&
				spName.EndsWith(quoteSuffix))
			{
				spName = spName.Substring(1, spName.Length - 2);
			}
			else
			{
				spName = spName.ToUpper();
			}

			string paramsText = String.Empty;

			command.Parameters.Clear();

			DataTable spSchema = command.Connection.GetDbSchemaTable(FbDbSchemaType.Procedure_Parameters,
				new object[] {spName});
			
			int count = 1;
			foreach (DataRow row in spSchema.Rows)
			{
				FbParameter parameter = command.Parameters.Add(
					"@" + row["PARAMETER_NAME"].ToString().Trim(),
					FbDbType.VarChar);

				parameter.FbDbType = (FbDbType)row["PROVIDER_TYPE"];

				if ((short)row["PARAMETER_TYPE"] == 0)
				{
					parameter.Direction = ParameterDirection.Input;
				}
				else
				{
					parameter.Direction = ParameterDirection.Output;
				}

				parameter.Size = Convert.ToInt32(row["COLUMN_SIZE"]);
				if (row["NUMERIC_PRECISION"] != DBNull.Value)
				{
					parameter.Precision = Convert.ToByte(row["NUMERIC_PRECISION"]);
				}
				if (row["NUMERIC_SCALE"] != DBNull.Value)
				{
					parameter.Scale	= Convert.ToByte((-1) * Convert.ToInt32(row["NUMERIC_SCALE"]));
				}

				count++;
			}
		}

		#endregion

		#region METHODS

		/// <include file='Doc/en_EN/FbCommandBuilder.xml' path='doc/class[@name="FbCommandBuilder"]/method[@name="GetInsertCommand"]/*'/>
		public FbCommand GetInsertCommand()
		{			
			if (insertCommand == null)
			{
				bool mustClose = false;
				try
				{
					if (dataAdapter.SelectCommand.Connection.State == ConnectionState.Closed)
					{
						mustClose = true;
						dataAdapter.SelectCommand.Connection.Open();						
					}
					
					buildInsertCommand(null, null);
				}
				catch (Exception ex)
				{
					throw ex;
				}
				finally
				{
					if (mustClose)
					{
						dataAdapter.SelectCommand.Connection.Close();
					}
				}
			}
			
			return insertCommand;
		}
		
		/// <include file='Doc/en_EN/FbCommandBuilder.xml' path='doc/class[@name="FbCommandBuilder"]/method[@name="GetUpdateCommand"]/*'/>
		public FbCommand GetUpdateCommand()
		{			
			if (updateCommand == null)
			{
				bool mustClose = false;
				try
				{
					if (dataAdapter.SelectCommand.Connection.State == ConnectionState.Closed)
					{
						mustClose = true;
						dataAdapter.SelectCommand.Connection.Open();						
					}
					
					buildUpdateCommand(null, null);
				}
				catch (Exception ex)
				{
					throw ex;
				}
				finally
				{
					if (mustClose)
					{
						dataAdapter.SelectCommand.Connection.Close();
					}
				}
			}
			
			return updateCommand;
		}

		/// <include file='Doc/en_EN/FbCommandBuilder.xml' path='doc/class[@name="FbCommandBuilder"]/method[@name="GetDeleteCommand"]/*'/>
		public FbCommand GetDeleteCommand()
		{			
			if (deleteCommand == null)
			{
				bool mustClose = false;
				try
				{
					if (dataAdapter.SelectCommand.Connection.State == ConnectionState.Closed)
					{
						mustClose = true;
						dataAdapter.SelectCommand.Connection.Open();						
					}

					buildDeleteCommand(null, null);
				}
				catch (Exception ex)
				{
					throw ex;
				}
				finally
				{
					if (mustClose)
					{
						dataAdapter.SelectCommand.Connection.Close();
					}
				}
			}
			
			return deleteCommand;
		}

		/// <include file='Doc/en_EN/FbCommandBuilder.xml' path='doc/class[@name="FbCommandBuilder"]/method[@name="RefreshSchema"]/*'/>
		public void RefreshSchema()
		{
			insertCommand = null;
			updateCommand = null;
			deleteCommand = null;			
			schemaTable   = null;
		}

		#endregion

		#region BUILD_COMMAND_METHODS

		private FbCommand buildInsertCommand(DataRow row, DataTableMapping tableMapping)
		{						
			StringBuilder	sql		= new StringBuilder();
			StringBuilder	fields	= new StringBuilder();
			StringBuilder	values	= new StringBuilder();
			string			dsColumnName = String.Empty;

			// Build schema table
			this.buildSchemaTable();

			this.createCommand(ref this.insertCommand);

			int i = 0;
			foreach (DataRow schemaRow in schemaTable.Rows)
			{
				if (isUpdatable(schemaRow, row))
				{
					if (fields.Length > 0)
					{
						fields.Append(separator);
					}
					if (values.Length > 0)
					{
						values.Append(separator);
					}

					// Build Field name and append it to the string
					// fields.Append(quotePrefix + schemaRow["BaseColumnName"] + quoteSuffix);
					fields.Append(getQuotedIdentifier(schemaRow["BaseColumnName"]));
					
					// Build value name and append it to the string
					values.Append("?");
					
					FbParameter parameter = createParameter(schemaRow, i, false);
					
					if (row != null)
					{
						dsColumnName	= getColumnName(tableMapping, schemaRow["BaseColumnName"].ToString());
						parameter.Value = row[dsColumnName];
					}

					i++;

					insertCommand.Parameters.Add(parameter);
				}
			}

			sql.AppendFormat(sqlInsert, getQuotedIdentifier(tableName), fields.ToString(), values.ToString());

			insertCommand.CommandText = sql.ToString();

			// None is the Default value for automatically generated commands
			insertCommand.UpdatedRowSource = UpdateRowSource.None;

			return insertCommand;
		}
		
		private FbCommand buildUpdateCommand(DataRow row, DataTableMapping tableMapping)
		{
			StringBuilder sql			= new StringBuilder();
			StringBuilder sets			= new StringBuilder();
			StringBuilder where			= new StringBuilder();
			string		  dsColumnName	= String.Empty;

			// Build schema table
			this.buildSchemaTable();

			if (!hasPrimaryKey)
			{
				throw new InvalidOperationException("Dynamic SQL generation for the UpdateCommand is not supported against a SelectCommand that does not return any key column information.");
			}

			this.createCommand(ref this.updateCommand);

			int i = 0;
			foreach (DataRow schemaRow in schemaTable.Rows)
			{
				if (isUpdatable(schemaRow, row))
				{
					if (sets.Length > 0)
					{
						sets.Append(separator);
					}

					// Build Field name and append it to the string
					sets.AppendFormat(setClausule, 
						getQuotedIdentifier(schemaRow["BaseColumnName"]));

					FbParameter parameter = createParameter(schemaRow, i, false);
										
					if (row != null)
					{
						dsColumnName	= this.getColumnName(tableMapping, schemaRow["BaseColumnName"].ToString());
						parameter.Value = row[dsColumnName];
					}

					i++;

					updateCommand.Parameters.Add(parameter);
				}				
			}
			
			// Build where clausule
			foreach (DataRow schemaRow in schemaTable.Rows)
			{				
				if (includedInWhereClause(schemaRow))
				{
					if (where.Length > 0)
					{
						where.Append(" AND ");
					}
				
					dsColumnName = this.getColumnName(tableMapping, schemaRow["BaseColumnName"].ToString());

					string quotedId = getQuotedIdentifier(schemaRow["BaseColumnName"]);
					if ((bool)schemaRow["IsKey"])
					{
						FbParameter parameter = createParameter(schemaRow, i, true);
						where.AppendFormat(whereClausule2, quotedId);

						if (row != null)
						{
							parameter.Value = row[dsColumnName, DataRowVersion.Original];
						}

						updateCommand.Parameters.Add(parameter);
					}
					else
					{
						// Create parameters for this field
						FbParameter parameter = createParameter(schemaRow, i, true);

						// Add where clausule for this field
						where.AppendFormat(whereClausule1, quotedId);

						// Set parameter values
						if (row != null)
						{
							parameter.Value = row[dsColumnName, DataRowVersion.Original];
						}

						// Add parameters to command parameter collectionb
						updateCommand.Parameters.Add(parameter);
					}

					i++;					
				}				
			}

			sql.AppendFormat(sqlUpdate, getQuotedIdentifier(tableName), sets.ToString(), where.ToString());
			
			updateCommand.CommandText = sql.ToString();

			// None is the Default value for automatically generated commands
			updateCommand.UpdatedRowSource = UpdateRowSource.None;

			return updateCommand;
		}

		private FbCommand buildDeleteCommand(DataRow row, DataTableMapping tableMapping)
		{
			StringBuilder sql	= new StringBuilder();
			StringBuilder where = new StringBuilder();
			string		  dsColumnName = String.Empty;

			// Build schema table
			this.buildSchemaTable();

			if (!hasPrimaryKey)
			{
				throw new InvalidOperationException("Dynamic SQL generation for the DeleteCommand is not supported against a SelectCommand that does not return any key column information.");
			}
			
			this.createCommand(ref this.deleteCommand);
		
			// Build where clausule
			int i = 0;
			foreach (DataRow schemaRow in schemaTable.Rows)
			{				
				if (includedInWhereClause(schemaRow)) 
				{
					if (where.Length > 0)
					{
						where.Append(" AND ");
					}
				
					dsColumnName = this.getColumnName(tableMapping, schemaRow["BaseColumnName"].ToString());

					string quotedId = getQuotedIdentifier(schemaRow["BaseColumnName"]);
					if ((bool)schemaRow["IsKey"])
					{
						FbParameter parameter = createParameter(schemaRow, i, true);
						where.AppendFormat(whereClausule2, quotedId);

						if (row != null)
						{
							parameter.Value = row[dsColumnName, DataRowVersion.Original];
						}

						deleteCommand.Parameters.Add(parameter);
					}
					else
					{
						// Create parameters for this field
						FbParameter parameter = createParameter(schemaRow, i, true);

						// Add where clausule for this field
						where.AppendFormat(whereClausule1, quotedId);

						// Set parameter values
						if (row != null)
						{
							parameter.Value = row[dsColumnName, DataRowVersion.Original];
						}

						// Add parameters to command parameter collectionb
						deleteCommand.Parameters.Add(parameter);
					}

					i++;
				}
			}

			sql.AppendFormat(sqlDelete, getQuotedIdentifier(tableName), where.ToString());
			
			deleteCommand.CommandText = sql.ToString();

			return deleteCommand;
		}

		private string getColumnName(DataTableMapping tableMapping, string sourceColumn)
		{
			string dsColumnName;

			if (tableMapping != null)
			{
				if (tableMapping.ColumnMappings.Count > 0)
				{
					dsColumnName = tableMapping.ColumnMappings[sourceColumn].DataSetColumn;
				}
				else
				{
					dsColumnName = sourceColumn;
				}
			}
			else
			{
				dsColumnName = sourceColumn;
			}

			return dsColumnName;
		}

		private FbParameter createParameter(DataRow schemaRow, int index, bool isWhereParameter)
		{
			FbParameter parameter = new FbParameter(String.Format("@p{0}", index), (FbDbType)schemaRow["ProviderType"]);

			parameter.Size = Convert.ToInt32(schemaRow["ColumnSize"]);
			if (schemaRow["NumericPrecision"] != DBNull.Value)
			{
				parameter.Precision	= Convert.ToByte(schemaRow["NumericPrecision"]);
			}
			if (schemaRow["NumericScale"] != DBNull.Value)
			{
				int multiplier	= 1;
				int scale		= (int)schemaRow["NumericScale"];
				if (scale < 0)
				{
					multiplier = -1;
				}
				parameter.Scale	= Convert.ToByte(scale*multiplier);
			}
			parameter.SourceColumn	= Convert.ToString(schemaRow["BaseColumnName"]);

			if (isWhereParameter)
			{
				parameter.SourceVersion	= DataRowVersion.Original;
			}
			else
			{
				parameter.SourceVersion	= DataRowVersion.Current;
			}

			return parameter;
		}

		private bool isUpdatable(DataRow schemaRow, DataRow row)
		{
			if (row != null)
			{
				string		columnName	= (string) schemaRow["ColumnName"];
				DataColumn	column		= row.Table.Columns[columnName];

				if (column != null)
				{
					if (column.Expression != null && column.Expression.Length != 0)
					{
						return false;
					}
					if (column.AutoIncrement)
					{
						return false;
					}
					if (column.ReadOnly)
					{
						return false;
					}
				}
			}

			if ((bool) schemaRow["IsExpression"])
			{
				return false;
			}
			if ((bool) schemaRow["IsAutoIncrement"])
			{
				return false;
			}
			if ((bool) schemaRow["IsRowVersion"])
			{
				return false;
			}
			if ((bool) schemaRow["IsReadOnly"])
			{
				return false;
			}

			return true;
		}

		private bool includedInWhereClause(DataRow schemaRow)
		{
			if (!(bool)schemaRow["IsKey"])
			{
				// return false;
			}

			FbDbType dbType = (FbDbType)schemaRow["ProviderType"];

			if (dbType == FbDbType.Array	||
				dbType == FbDbType.Binary)
			{
				return false;
			}

			if ((bool)schemaRow["IsLong"])
			{
				return false;
			}

			return true;
		}

		private void buildSchemaTable()
		{
			if (this.SelectCommand == null)
			{
				throw new InvalidOperationException("The DataAdapter.SelectCommand property needs to be initialized.");
			}
			if (this.SelectCommand.Connection == null)
			{
				throw new InvalidOperationException("The DataAdapter.SelectCommand.Connection property needs to be initialized.");
			}

			if (schemaTable == null)
			{				
				FbDataReader reader = SelectCommand.ExecuteReader(CommandBehavior.SchemaOnly);
				schemaTable = reader.GetSchemaTable();
				reader.Close();

				this.checkSchemaTable();
			}			
		}

		private void checkSchemaTable()
		{
			tableName		= String.Empty;
			hasPrimaryKey	= false;

			foreach (DataRow schemaRow in schemaTable.Rows)
			{
				if (tableName.Length == 0)
				{
					tableName = (string)schemaRow["BaseTableName"];
				}
				if (tableName != (string)schemaRow["BaseTableName"] &&
					!(bool)schemaRow["IsExpression"])
				{
					throw new InvalidOperationException("Dynamic SQL generation is not supported against multiple base tables.");
				}
				if ((bool)schemaRow["IsKey"])
				{
					hasPrimaryKey = true;
				}
			}
		}

		private string getQuotedIdentifier(object identifier)
		{
			return quotePrefix + identifier.ToString() + quoteSuffix;
		}

		private void createCommand(ref FbCommand command)
		{
			if (command == null)
			{
				command = new FbCommand(
					String.Empty, 
					this.SelectCommand.Connection, 
					this.SelectCommand.Transaction);
			}
			command.CommandType			= CommandType.Text;
			command.UpdatedRowSource	= UpdateRowSource.None;
			command.Parameters.Clear();
		}

		#endregion

		#region EVENT_HANDLER

		private void rowUpdatingHandler(object sender, FbRowUpdatingEventArgs e)
		{
			if (e.Status != UpdateStatus.Continue)
			{
				return;
			}

			switch (e.StatementType) 
			{
				case StatementType.Insert:
					this.insertCommand = e.Command;
					break;

				case StatementType.Update:
					this.updateCommand = e.Command;
					break;

				case StatementType.Delete:
					this.deleteCommand = e.Command;
					break;
			}

			bool mustClose = false;
			try 
			{
				if (this.dataAdapter.SelectCommand.Connection.State == ConnectionState.Closed)
				{
					mustClose = true;
					dataAdapter.SelectCommand.Connection.Open();						
				}

				switch (e.StatementType) 
				{
					case StatementType.Insert:
						e.Command = this.buildInsertCommand(e.Row, e.TableMapping);
						break;

					case StatementType.Update:
						e.Command = this.buildUpdateCommand(e.Row, e.TableMapping);
						break;
					
					case StatementType.Delete:
						e.Command = this.buildDeleteCommand(e.Row, e.TableMapping);
						break;
				}
			}
			catch (Exception exception) 
			{
				e.Errors = exception;
				e.Status = UpdateStatus.ErrorsOccurred;
			}
			finally
			{
				if (mustClose)
				{
					this.dataAdapter.SelectCommand.Connection.Close();
				}
			}
		}

		#endregion
	}
}
